// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@grid-columns`.

.make-grid-columns() {
	[class*="col-"] {
		--col-width: calc(var(--nbcol)/var(--grid-column));
		position: relative;
		// Prevent columns from collapsing when empty
		min-height: 1px;
		// Inner gutter via padding
		padding-left: ceil((@grid-gutter-width / 2));
		padding-right: floor((@grid-gutter-width / 2));
		left: auto;
		right: auto;
		flex: 0 0 ~"calc(100% * var(--col-width))";
		max-width: ~"calc(100% * var(--col-width))";
	}
	[class*="push-"] {
		left: ~"calc(100% * (var(--push)/var(--grid-column)))";
	}
	[class*="pull-"] {
		right:  ~"calc(100% * (var(--pull)/var(--grid-column)))";
	}
	[class*="offset-"] {
		margin-left:  ~"calc(100% * (var(--offset)/var(--grid-column)))";
	}
}

.calc-grid-column(@class, @index, @type) when (@index > 0) and not(@class = ph) {
	.@{type}-@{class}-@{index} {
		.make-column(@index, @type);
	}
}
.calc-grid-column(@class, @index, @type) when (@index > 0) and (@class = ph) {
	.@{type}-@{index} {
		.make-column(@index, @type);
	}
}

// Basic looping in LESS
.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
	.calc-grid-column(@class, @index, @type);
	// next iteration
	.loop-grid-columns((@index - 1), @class, @type);
}

// Create grid for specific class
.make-grid(@class) {
	.loop-grid-columns(@grid-columns, @class, col);
	.loop-grid-columns(@grid-columns, @class, pull);
	.loop-grid-columns(@grid-columns, @class, push);
	.loop-grid-columns(@grid-columns, @class, offset);
}