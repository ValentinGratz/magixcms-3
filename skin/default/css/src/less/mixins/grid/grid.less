// Grid system
//
// Generate semantic grid columns with these mixins.
.grid-display(@flex: @enb-flex) when (@flex = 1) {
	display: flex;
	flex-wrap: wrap;
}
.grid-display(@flex: @enb-flex) when (@flex = 0) {
	&:extend(.clearfix all);
}

.container(@gutter) {
	margin-right: auto;
	margin-left: auto;
	padding-left: floor((@gutter / 2));
	padding-right: ceil((@gutter / 2));
	width: 100%;
}

// Centered container element
.container-fixed(@gutter: @grid-gutter-width, @flex: @enb-flex) when (@flex = 1) {
	.container(@gutter);
}
.container-fixed(@gutter: @grid-gutter-width, @flex: @enb-flex) when (@flex = 0) {
	.container(@gutter);
	.grid-display();
}

// Creates a wrapper for a series of columns
.make-row(@gutter: @grid-gutter-width) {
	margin-left: ceil((@gutter / -2));
	margin-right: floor((@gutter / -2));
	.grid-display();
}
.make-rows(@class) {
	.row-@{class}-center {
		justify-content: center;
	}
	.row-@{class}-reverse {
		flex-direction: row-reverse;
	}
}

// Generate the phone columns
.make-column(@columns, @type) when (@type = col){
	--nbcol: @columns;
}
.make-column(@columns, @type) when (@type = push){
	--push: @columns;
}
.make-column(@columns, @type) when (@type = pull){
	--pull: @columns;
}
.make-column(@columns, @type) when (@type = offset){
	--offset: @columns;
}
